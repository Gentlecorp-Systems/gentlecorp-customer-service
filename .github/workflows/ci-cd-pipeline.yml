name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main
    tags:
      - 'v*'  # Nur für Versionstags (z.B. v1.0.0)

permissions:
  contents: read      # Erlaubt das Lesen von Repository-Inhalten
  security-events: write  # Erlaubt das Schreiben von Security-Analysen
  actions: read       # Erlaubt das Lesen von Actions
  packages: write     # Notwendig für Docker-Image Uploads
  id-token: write   # Erlaubt Zugriff auf GitHub Environments00

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      CURRENT_DATE: ${{ steps.set_date.outputs.CURRENT_DATE }}  # Definiere Output
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-0

      - name: Set CURRENT_DATE
        id: set_date
        run: echo "CURRENT_DATE=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

      - name: Speichere CURRENT_DATE in Repository-Variable
        run: |
          curl -X PATCH \
          -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/variables/CURRENT_DATE \
          -d '{"value": "${{ steps.set_date.outputs.CURRENT_DATE }}"}'

      - name: Debug Output
        run: echo "Gesetztes Datum ${{ steps.set_date.outputs.CURRENT_DATE }}"

  analyze:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=Gentlecorp-Systems_gentlecorp-customer-service
            -Dsonar.projectName=Customer-Service
            -Dsonar.organization=gentlecorp-systems
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=./src/main/java
            -Dsonar.exclusions=**/*.java
            -Dsonar.branch.name=${{ github.ref_name }}

  test:
    name: Run Customer Tests
    runs-on: self-hosted # Nutze einen lokalen Runner

    steps:
      # 1. Repository klonen
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. `.env`-Datei mit Secrets erstellen
      - name: Create .env file
        run: |
          echo "KEYS_PATH=${{ secrets.KEYS_PATH }}" >> .env
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env

      # 3. Tests ausführen mit Code Coverage
      - name: Run Tests with Coverage
        run: ./gradlew clean build jacocoTestReport --no-daemon

      # 4. Testberichte speichern
      - name: Archive test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: build/reports/tests/test

      # 5. Code Coverage Bericht hochladen
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@2d2cd3c094b82daf4a85daabc9d1aba59a7dde3c
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/reports/jacoco/test/html/jacocoTestReport.xml
          fail_ci_if_error: true
          verbose: true

  package:
    runs-on: ubuntu-latest
    needs: [build, analyze, test]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Package Application
        run: ./gradlew bootJar --build-cache

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: customer-jar
          path: build/libs/*.jar

  docker:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download JAR File
        uses: actions/download-artifact@v4
        with:
          name: customer-jar
          path: build/libs

      - name: Use CURRENT_DATE
        run: echo "CURRENT_DATE=${{ needs.build.outputs.CURRENT_DATE }}"

      - name: Build Docker Image
        run: |
          docker build \
            -t gentlecorp-systems/customer:${{ env.CURRENT_DATE }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: |
          docker tag gentlecorp-systems/customer:2025.01.29 calebscript/customer:${{ env.CURRENT_DATE }}
          docker push calebscript/customer:${{ env.CURRENT_DATE }}
