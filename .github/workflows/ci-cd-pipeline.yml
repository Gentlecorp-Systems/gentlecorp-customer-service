name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main
    tags:
      - 'v*'  # Nur für Versionstags (z.B. v1.0.0)

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Project
        run: ./gradlew clean build --build-cache

  analyze:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

  test:
    name: Run Customer Tests
    needs: analyze
    runs-on: self-hosted # Nutze einen lokalen Runner

    steps:
      # 1. Repository klonen
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. `.env`-Datei mit Secrets erstellen
      - name: Create .env file
        run: |
          echo "KEYS_PATH=${{ secrets.KEYS_PATH }}" >> .env
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env

      # 3. Tests ausführen mit Code Coverage
      - name: Run Tests with Coverage
        run: ./gradlew clean build jacocoTestReport --no-daemon

      # 4. Testberichte speichern
      - name: Archive test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: build/reports/tests/test

      # 5. Code Coverage Bericht hochladen
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/reports/jacoco/test/html/jacocoTestReport.xml
          fail_ci_if_error: true
          verbose: true

  package:
    runs-on: ubuntu-latest
    needs: [build, analyze, test]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Package Application
        run: ./gradlew bootJar --build-cache

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: customer-jar
          path: build/libs/*.jar

  docker:
    runs-on: self-hosted
    needs: package
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download JAR File
        uses: actions/download-artifact@v4
        with:
          name: customer-jar
          path: build/libs

      - name: Get Current Date
        id: date
        run: |
            echo "CURRENT_DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build \
            -t gentlecorp-systems/customer:${{ env.CURRENT_DATE }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: |
          docker tag gentlecorp-systems/customer:2025.01.29 calebscript/customer:${{ env.CURRENT_DATE }}
          docker push calebscript/customer:${{ env.CURRENT_DATE }}
